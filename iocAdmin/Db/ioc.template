# Used by Channel Access Security to determine access to this IOC.
record(mbbo, "$(IOCNAME)$(SEP=:)ACCESS")
{
  field(DESC, "$(IOCNAME) Acc Mode")
  field(PINI, "YES")
  field(ZRST, "Running")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Maintenance")
  field(ONSV, "MINOR")
  field(TWST, "Test")
  field(TWSV, "MINOR")
  field(THST, "OFFLINE")
  field(THSV, "MAJOR")
  info(autosaveFields, "VAL")
}
record(stringin, "$(IOCNAME)$(SEP=:)STARTTOD")
{
    field(DESC, "Time and date of startup")
    field(DTYP, "Soft Timestamp")
    field(PINI, "YES")
    field(INP, "@$(TODFORMAT)")
}
record(stringin, "$(IOCNAME)$(SEP=:)TOD")
{
    field(DESC, "Current time and date")
    field(DTYP, "Soft Timestamp")
    field(SCAN, "1 second")
    field(INP, "@$(TODFORMAT)")
}
record(calcout, "$(IOCNAME)$(SEP=:)HEARTBEAT")
{
    field(DESC, "1 Hz counter since startup")
    field(CALC, "(A<2147483647)?A+1:1")
    field(SCAN, "1 second")
    field(INPA, "$(IOCNAME)$(SEP=:)HEARTBEAT")
}
# if autosave is working, START_CNT creates a running count of 
# number of times the IOC was started.
record(calcout, "$(IOCNAME)$(SEP=:)START_CNT")
{
    field(DESC, "Increments at startup")
    field(CALC, "A+1")
    field(PINI, "YES")
    field(INPA, "$(IOCNAME)$(SEP=:)START_CNT")
    info(autosaveFields_pass0, "VAL")
}
#
# Using an existing internal set of subroutines, this
# PV updates the Access Security mechanism dynamically.
# The .acf file is re-read.
#
record( sub, "$(IOCNAME)$(SEP=:)READACF")
{
    field( DESC, "$(IOCNAME) ACF Update")
    field( INAM, "asSubInit")
    field( SNAM, "asSubProcess")
    field( BRSV, "INVALID")
}
record(sub, "$(IOCNAME)$(SEP=:)SYSRESET")
{
    alias("$(IOCNAME)$(SEP=:)SysReset")
    field(DESC, "IOC Restart" )
    field(SNAM, "rebootProc")
    field(BRSV,"INVALID")
    field(L,"1")
}

record(ai, "$(IOCNAME)$(SEP=:)CA_CLNT_CNT") {
  field(DESC, "Number of CA Clients")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_clients")
  field(HOPR, "200")
  field(HIHI, "175")
  field(HIGH, "100")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)CA_CONN_CNT") {
  field(DESC, "Number of CA Connections")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_connections")
  field(HOPR, "5000")
  field(HIHI, "4500")
  field(HIGH, "4000")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)RECORD_CNT") {
  field(DESC, "Number of Records")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@records")
}

record(ai, "$(IOCNAME)$(SEP=:)FD_MAX") {
  field(DESC, "Max File Descriptors")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@maxfd")
}

record(ai, "$(IOCNAME)$(SEP=:)FD_CNT") {
  field(DESC, "Allocated File Descriptors")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(FLNK, "$(IOCNAME)$(SEP=:)FD_FREE  PP MS")
  field(INP, "@fd")
}

record(calc, "$(IOCNAME)$(SEP=:)FD_FREE") {
  field(DESC, "Available FDs")
  field(CALC, "B>0?B-A:C")
  field(INPA, "$(IOCNAME)$(SEP=:)FD_CNT  NPP MS")
  field(INPB, "$(IOCNAME)$(SEP=:)FD_MAX  NPP MS")
  field(INPC, "1000")
  field(HOPR, "150")
  field(LOLO, "5")
  field(LOW, "20")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)SYS_CPU_LOAD") {
  field(DESC, "System CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@sys_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)IOC_CPU_LOAD") {
  alias("$(IOCNAME)$(SEP=:)LOAD")
  field(DESC, "IOC CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ioc_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)CPU_CNT") {
  field(DESC, "Number of CPUs")
  field(DTYP, "IOC stats")
  field(INP, "@no_of_cpus")
  field(PINI, "YES")
}

record(ai, "$(IOCNAME)$(SEP=:)SUSP_TASK_CNT") {
  field(DESC, "Number Suspended Tasks")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@suspended_tasks")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)MEM_USED") {
  field(DESC, "Allocated Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@allocated_bytes")
  field(EGU, "byte")
}

record(ai, "$(IOCNAME)$(SEP=:)MEM_FREE") {
  field(DESC, "Free Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@free_bytes")
  field(EGU, "byte")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "$(IOCNAME)$(SEP=:)MEM_MAX") {
  field(DESC, "Maximum Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@total_bytes")
  field(EGU, "byte")
}

record(ao, "$(IOCNAME)$(SEP=:)CA_UPD_TIME") {
  field(DESC, "CA Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@ca_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "15")
  field(PINI, "YES")
}

record(ao, "$(IOCNAME)$(SEP=:)FD_UPD_TIME") {
  field(DESC, "FD Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@fd_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "20")
  field(PINI, "YES")
}

record(ao, "$(IOCNAME)$(SEP=:)LOAD_UPD_TIME") {
  field(DESC, "CPU Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@cpu_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(ao, "$(IOCNAME)$(SEP=:)MEM_UPD_TIME") {
  field(DESC, "Memory Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@memory_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)ST_SCRIPT1") {
  field(DESC, "Startup Script Part1")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_1")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)ST_SCRIPT2") {
  field(DESC, "Startup Script Part2")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_2")
  field(PINI, "YES")
}

record(waveform, "$(IOCNAME)$(SEP=:)ST_SCRIPT") {
  field(DESC, "Startup Script")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)KERNEL_VERS") {
  field(DESC, "Kernel Version")
  field(DTYP, "IOC stats")
  field(INP, "@kernel_ver")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)EPICS_VERS") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(PINI, "YES")
}

record(waveform, "$(IOCNAME)$(SEP=:)EPICS_VERSION") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)HOSTNAME") {
  field(DESC, "Host Name")
  field(DTYP, "IOC stats")
  field(INP, "@hostname")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)APP_DIR1") {
  field(DESC, "Application Directory Part 1")
  field(DTYP, "IOC stats")
  field(INP, "@pwd1")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)APP_DIR2") {
  field(DESC, "Application Directory Part 2")
  field(DTYP, "IOC stats")
  field(INP, "@pwd2")
  field(PINI, "YES")
}

record(waveform, "$(IOCNAME)$(SEP=:)APP_DIR") {
  field(DESC, "Application Directory")
  field(DTYP, "IOC stats")
  field(INP, "@pwd")
  field(NELM, "160")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)UPTIME") {
  field(DESC, "Elapsed Time since Start")
  field(SCAN, "1 second")
  field(DTYP, "IOC stats")
  field(INP, "@up_time")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)ENGINEER") {
  field(DESC, "Engineer")
  field(DTYP, "IOC stats")
  field(INP, "@engineer")
  field(PINI, "YES")
}

record(stringin, "$(IOCNAME)$(SEP=:)LOCATION") {
  field(DESC, "Location")
  field(DTYP, "IOC stats")
  field(INP, "@location")
  field(PINI, "YES")
}

record(ai, "$(IOCNAME)$(SEP=:)PROCESS_ID") {
  field(DESC, "Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@proc_id")
}

record(ai, "$(IOCNAME)$(SEP=:)PARENT_ID") {
  field(DESC, "Parent Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@parent_proc_id")
}

record(ai, "$(IOCNAME)$(SEP=:)SCANONCE_Q_SIZE") {
  field(DESC, "max # entries in IOC scanOnce queue")
  field(DTYP, "IOC stats")
  field(INP,  "@scanOnceQueueSize")
  field(PINI, "YES")
}
record(ai, "$(IOCNAME)$(SEP=:)CB_Q_SIZE") {
  field(DESC, "max # entries in IOC callback queues")
  field(DTYP, "IOC stats")
  field(INP,  "@cbQueueSize")
  field(PINI, "YES")
}

substitute "QUEUE=scanOnce, QUEUE_CAPS=SCANONCE, QUEUE_TYPE=SCANONCE"
include "iocQueue.db"

substitute "QUEUE=cbLow, QUEUE_CAPS=CBLOW, QUEUE_TYPE=CB"
include "iocQueue.db"

substitute "QUEUE=cbMedium, QUEUE_CAPS=CBMEDIUM, QUEUE_TYPE=CB"
include "iocQueue.db"

substitute "QUEUE=cbHigh, QUEUE_CAPS=CBHIGH, QUEUE_TYPE=CB"
include "iocQueue.db"
